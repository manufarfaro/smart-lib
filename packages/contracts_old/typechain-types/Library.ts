/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Library {
  export type BookStruct = {
    id: BigNumberish;
    name: string;
    year: BigNumberish;
    author: string;
    isFinished: boolean;
  };

  export type BookStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    id: BigNumber;
    name: string;
    year: BigNumber;
    author: string;
    isFinished: boolean;
  };
}

export interface LibraryInterface extends utils.Interface {
  functions: {
    "addBook(string,uint16,string,bool)": FunctionFragment;
    "bookList(uint256)": FunctionFragment;
    "bookOwners(uint256)": FunctionFragment;
    "getFinishedBooks()": FunctionFragment;
    "getUnfinishedBooks()": FunctionFragment;
    "setFinished(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBook"
      | "bookList"
      | "bookOwners"
      | "getFinishedBooks"
      | "getUnfinishedBooks"
      | "setFinished"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBook",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "bookList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bookOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinishedBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnfinishedBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFinished",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFinishedBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnfinishedBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFinished",
    data: BytesLike
  ): Result;

  events: {
    "AddBook(address,uint256)": EventFragment;
    "SetFinished(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddBook"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFinished"): EventFragment;
}

export interface AddBookEventObject {
  recipient: string;
  bookId: BigNumber;
}
export type AddBookEvent = TypedEvent<[string, BigNumber], AddBookEventObject>;

export type AddBookEventFilter = TypedEventFilter<AddBookEvent>;

export interface SetFinishedEventObject {
  bookId: BigNumber;
  isFinished: boolean;
}
export type SetFinishedEvent = TypedEvent<
  [BigNumber, boolean],
  SetFinishedEventObject
>;

export type SetFinishedEventFilter = TypedEventFilter<SetFinishedEvent>;

export interface Library extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBook(
      name: string,
      year: BigNumberish,
      author: string,
      isFinished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bookList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, boolean] & {
        id: BigNumber;
        name: string;
        year: BigNumber;
        author: string;
        isFinished: boolean;
      }
    >;

    bookOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFinishedBooks(
      overrides?: CallOverrides
    ): Promise<[Library.BookStructOutput[]]>;

    getUnfinishedBooks(
      overrides?: CallOverrides
    ): Promise<[Library.BookStructOutput[]]>;

    setFinished(
      bookId: BigNumberish,
      isFinished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBook(
    name: string,
    year: BigNumberish,
    author: string,
    isFinished: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bookList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, boolean] & {
      id: BigNumber;
      name: string;
      year: BigNumber;
      author: string;
      isFinished: boolean;
    }
  >;

  bookOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getFinishedBooks(
    overrides?: CallOverrides
  ): Promise<Library.BookStructOutput[]>;

  getUnfinishedBooks(
    overrides?: CallOverrides
  ): Promise<Library.BookStructOutput[]>;

  setFinished(
    bookId: BigNumberish,
    isFinished: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBook(
      name: string,
      year: BigNumberish,
      author: string,
      isFinished: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    bookList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, boolean] & {
        id: BigNumber;
        name: string;
        year: BigNumber;
        author: string;
        isFinished: boolean;
      }
    >;

    bookOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getFinishedBooks(
      overrides?: CallOverrides
    ): Promise<Library.BookStructOutput[]>;

    getUnfinishedBooks(
      overrides?: CallOverrides
    ): Promise<Library.BookStructOutput[]>;

    setFinished(
      bookId: BigNumberish,
      isFinished: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddBook(address,uint256)"(
      recipient?: null,
      bookId?: null
    ): AddBookEventFilter;
    AddBook(recipient?: null, bookId?: null): AddBookEventFilter;

    "SetFinished(uint256,bool)"(
      bookId?: null,
      isFinished?: null
    ): SetFinishedEventFilter;
    SetFinished(bookId?: null, isFinished?: null): SetFinishedEventFilter;
  };

  estimateGas: {
    addBook(
      name: string,
      year: BigNumberish,
      author: string,
      isFinished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bookList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bookOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinishedBooks(overrides?: CallOverrides): Promise<BigNumber>;

    getUnfinishedBooks(overrides?: CallOverrides): Promise<BigNumber>;

    setFinished(
      bookId: BigNumberish,
      isFinished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBook(
      name: string,
      year: BigNumberish,
      author: string,
      isFinished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bookList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bookOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinishedBooks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnfinishedBooks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFinished(
      bookId: BigNumberish,
      isFinished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
